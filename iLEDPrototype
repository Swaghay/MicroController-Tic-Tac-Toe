// This #include statement was automatically added by the Particle IDE.
#include <Keypad_Particle.h>

// This #include statement was automatically added by the Particle IDE.
#include <neopixel.h>

// Sets pixel COUNT, PIN and TYPE for the neopixels
int PIXEL_PIN = D0;
int PIXEL_COUNT = 4; //FIXME: Change the pixel count to 6 and optimize the code for the 3x3 tic tac toe game later.
int PIXEL_TYPE = WS2812; // iLED's must all be of type WS2812!!
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);


const byte ROWS = 3;
const byte COLS = 3;

// set up keypad buttons
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},// This #include statement was automatically added by the Particle IDE.
#include <Keypad_Particle.h>

// This #include statement was automatically added by the Particle IDE.
#include <neopixel.h>

// Sets pixel COUNT, PIN and TYPE for the neopixels
int PIXEL_PIN = D0;
int PIXEL_COUNT = 4; //FIXME: Change the pixel count to 6 and optimize the code for the 3x3 tic tac toe game later.
int PIXEL_TYPE = WS2812; // iLED's must all be of type WS2812!!
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);


const byte ROWS = 3;
const byte COLS = 3;

// set up keypad buttons
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
};

byte rowPins[ROWS] = { D7, D6, D5 };
byte colPins[COLS] = { D3, D2, D1 };

// create Keypad object variable called "keypad"
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );



void setup() {
    
    strip.begin();
    Serial.begin(9600);


}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
    
    static int i = 0;
    
    // Declaring & initializing iLED Colors
    static int PixelColorCyan = strip.Color(255 , 0, 255); // Declaration & initialization of cyan iLED Color
    static int PixelColorOff = strip.Color(0 , 0, 0); // Declaration & initialization of no iLED Color (off)
    
    if (i = 0) {
    // All LED Colors will initially be off at first iteration of loop() function
    strip.setPixelColor(0, PixelColorOff);
    strip.setPixelColor(1, PixelColorOff);
    strip.setPixelColor(2, PixelColorOff);
    strip.setPixelColor(3, PixelColorOff);
    }
    // Declaring a multidimensional array that will store the state of the LED's (on or off). Static data type to ensure that the variable is only initialized once and memory values retained as the loop() function continues looping
    // FIXME: Must change multidimensional array to ledState[3][3] later on when making the actual tic tac to game. Temporarily a 2x2 matrix due to the limitated availability of six iLED's at the time
    
    // Stores the LED states of both characters. Initially, all colors are off, so everything is initialized as false.
    static bool ledStateP1[2][2] = {false, false, false, false};
    static bool ledStateP2[2][2] = {false, false, false, false};
    

    
    int whichLEDOn = -1;
    
    // NOTE TO DELETE IN FUTURE: When two players are playing against each other, we will want three colors, one to indicate each player and then an off color. 
    
  // This key will store the value that the user pressed
  char key = keypad.getKey();
  
  if (key){ 
     // This if statement will run whenever a person presses a key in the keypad. 
    Serial.print("This number was pressed: "); // For debugging purposes
    Serial.println(key);
    
    whichLEDOn = ledToTurnOn(key, ledStateP1, ledStateP2);
    
    // Setting the color of the LED
    if (whichLEDOn == 0) {
    strip.setPixelColor(0, PixelColorCyan);
    }
    else if (whichLEDOn == 1) {
    strip.setPixelColor(1, PixelColorCyan);
    }
    else if (whichLEDOn == 2) {
        strip.setPixelColor(2, PixelColorCyan);
    }
    else if (whichLEDOn == 3) {
        strip.setPixelColor(3, PixelColorCyan);
    }
    
    // For debugging purposes
    Serial.print("Which LED On: ");
    Serial.println(whichLEDOn);
    
    
    
    strip.show();
  }
  
    if (i == 0) {
    i = 1;
    }
    
}

/*
Description: This function will identify the keypad number being pressed, and return the number iLED that should be turned on. If no iLED is to be turned on, returns -1.
    keypadNum - Keypad number that was pressed (character)
    ledState[] - Array that stores the state of the LED's, passed by reference and changed if the keypad number is changed
Output:
    Returns the number of the iLED to turn on
*/

int ledToTurnOn(char keypadNum, bool ledStatePlayer[2][2], const bool ledStateOtherPlayer[2][2] ) {
    // FIXME: Must change multidimensional array in function argument to ledState[3][3] later on when making the actual tic tac to game. Temporarily a 2x2 matrix due to the limitated availability of six iLED's at the time
    
    // 10 if statements to determine which number was pressed. If the number hasn't already been pressed by the player or the opponent player, the iLED will be turned on and the led state of the player will be changed.
    if (keypadNum == '1') {
        if (ledStatePlayer[0][0] == false && ledStateOtherPlayer[0][0] == false) {
            ledStatePlayer[0][0] = true;
            return 0; // Turn on iLED 0
        }
        else {
            return -1;
        }
        
    }
    else if (keypadNum == '2') {
        if (ledStatePlayer[0][1] == false && ledStateOtherPlayer[0][1] == false) {
            ledStatePlayer[0][1] = true;
            return 1; // Turn on iLED 1
        }
        else {
            return -1;
        }
    }
    else if (keypadNum == '3') {
        // FIXME: Finish the rest of this code later on when 3x3 matrices are supported
    }
    else if (keypadNum == '4') {
        if (ledStatePlayer[1][0] == false && ledStateOtherPlayer[1][0] == false) {
            ledStatePlayer[1][0] = true;
            return 2; // Turn on iLED 2
            
        }
        else {
            return -1;
        }
        
    }
    else if (keypadNum == '5') {
        if (ledStatePlayer[1][1] == false && ledStateOtherPlayer[1][1] == false) {
            ledStatePlayer[1][1] = true;
            return 3; // Turn on iLED 3
            
        }
        else {
            return -1;
        }
    }   
    // ------------
    // FIXME: Finish the rest of this code later on when 3x3 matrices are supported
    else if (keypadNum == '6') {
        
    }    
    else if (keypadNum == '7') {
        
    }    
    else if (keypadNum == '8') {
        
    }    
    else if (keypadNum == '9') {
        
    }  
    // -------------
    else { 
        return -1; // User did not press a button from 1-9, function will do nothing and return -1
    }
    return -1;
}
